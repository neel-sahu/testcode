
BROKER SCHEMA OUTBOUND_TEXT_XML

CREATE COMPUTE MODULE VESSEL_Get_RESREQ_Data_GetFormatType_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET Environment.variables.ediStartTime = PASSTHRU('SELECT CURRENT_TIMESTAMP AS EDISTARTTIME;');
		SET Environment.variables.txnID = InputRoot.XMLNSC.PCS.Common_Ref;
		DECLARE MessageName CHARACTER InputRoot.XMLNSC.PCS.Action_In;
		DECLARE request BLOB ASBITSTREAM(InputRoot.XMLNSC, 549,1208);
		DECLARE ReplaceCarriageReturn BLOB X'0d0a';
		SET request = REPLACE(request, ReplaceCarriageReturn);
		SET Environment.variables.request = CAST(request AS CHARACTER CCSID 1208);
		SET Environment.variables.dbStartTime = PASSTHRU('SELECT CURRENT_TIMESTAMP AS DBSTARTTIME;');
		CALL EDI_GetFormatTypeByRefAndMsg(Environment.variables.txnID,MessageName,Environment.Variables.Result[],Environment.Variables.Result56[]);

		RETURN TRUE;
	END;
END MODULE;


CREATE COMPUTE MODULE VESSEL_Get_RESREQ_Data_textCreation_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL EDI_TGetRESREQ(Environment.variables.txnID,Environment.Variables.TXTResult1[],Environment.Variables.TXTResult2[],Environment.Variables.TXTResult3[],Environment.Variables.TXTResult4[],Environment.Variables.TXTResult5[],Environment.Variables.TXTResult6[],Environment.Variables.TXTResult7[]);
		SET Environment.variables.dbEndTime = PASSTHRU('SELECT CURRENT_TIMESTAMP AS DBENDTIME;');
		SET OutputRoot.Properties.CodedCharSetId = 1208;
		-- SET OutputRoot.Properties.MessageType ='{}:RESOURCE_REQUISITION';
		-- SET OutputRoot.Properties.MessageSet ='{JMB_DFDL}';
		-- SET OutputRoot.Properties.ReplyProtocol = 'FILE';
		--UNH
		SET OutputRoot.DFDL.RESOURCE_REQUISITION.UNH.DocumentType = COALESCE(Environment.Variables.TXTResult1[1].DocumentType,'')||''||
		COALESCE(Environment.Variables.TXTResult1[1].DocumentName,'')||''||
		COALESCE(Environment.Variables.TXTResult1[1].DocumentNumber,'')||''||
		COALESCE(Environment.Variables.TXTResult1[1].CommonRefNumber,'')||''||
		COALESCE(Environment.Variables.TXTResult1[1].MessageType,'')||''||
		COALESCE(Environment.Variables.TXTResult1[1].SenderID,'');
		--RPD

		DECLARE countRecord INTEGER 0;
		DECLARE i INTEGER 1;

		SET countRecord = CARDINALITY(Environment.Variables.TXTResult2[]);

		WHILE countRecord > 0 DO
			SET OutputRoot.DFDL.RESOURCE_REQUISITION.RPD.RecipientsID[i] = Environment.Variables.TXTResult2[i].ReceivingParty ;
			SET i = i + 1;
			SET countRecord = countRecord - 1;
		END WHILE;
		--NPD

		DECLARE countRecord1 INTEGER 0;
		DECLARE j INTEGER 1;

		SET countRecord1 = CARDINALITY(Environment.Variables.TXTResult3[]);

		WHILE countRecord1 > 0 DO
			SET OutputRoot.DFDL.RESOURCE_REQUISITION.NPD.NotifyPartyIDs[j] = Environment.Variables.TXTResult3[j].NotifyParty ;
			SET j = j + 1;
			SET countRecord1 = countRecord1 - 1;
		END WHILE;
		--RAH
		SET OutputRoot.DFDL.RESOURCE_REQUISITION.RAH.RAHValues = COALESCE(Environment.Variables.TXTResult4[1].RecordType,'')||''||
		COALESCE(Environment.Variables.TXTResult4[1].VCN,'')||''||
		COALESCE(Environment.Variables.TXTResult4[1].CallSign,'')||''||
		COALESCE(Environment.Variables.TXTResult4[1].IMONumber,'')||''||
		COALESCE(Environment.Variables.TXTResult4[1].VoyageNumber,'')||''||
		COALESCE(Environment.Variables.TXTResult4[1].TOOrDOckCode,'')||''||
		COALESCE(Environment.Variables.TXTResult4[1].ResReqFrom,'')||''||
		COALESCE(Environment.Variables.TXTResult4[1].ResReqDate,'');
		--RAD

		DECLARE countRecord2 INTEGER 0;
		DECLARE countRecord3 INTEGER 0;
		DECLARE k INTEGER 1;
		DECLARE m INTEGER 1;


		SET countRecord2 = CARDINALITY(Environment.Variables.TXTResult5[]);
		SET countRecord3 = CARDINALITY(Environment.Variables.TXTResult6[]);
		DECLARE sk INTEGER 1;
		DECLARE ad INTEGER 1;
		WHILE (sk <= countRecord2) DO
			SET OutputRoot.DFDL.RESOURCE_REQUISITION.RAD[sk].RADValues = COALESCE(Environment.Variables.TXTResult5[sk].RecordType,'')||''||
			COALESCE(Environment.Variables.TXTResult5[sk].RecordNumber,'')||''||
			COALESCE(Environment.Variables.TXTResult5[sk].NatureOfOperation,'')||''||
			COALESCE(Environment.Variables.TXTResult5[sk].CargoType,'')||''||
			COALESCE(Environment.Variables.TXTResult5[sk].BerthNumber,'')||''||
			COALESCE(Environment.Variables.TXTResult5[sk].HSCode,'')||''||
			COALESCE(Environment.Variables.TXTResult5[sk].CraneDeploymentType,'')||''||
			COALESCE(Environment.Variables.TXTResult5[sk].PurposeOfGang,'')||''||
			COALESCE(Environment.Variables.TXTResult5[sk].HookType,'')||''||
			COALESCE(Environment.Variables.TXTResult5[sk].ModeOfOperation,'')||''||
			COALESCE(Environment.Variables.TXTResult5[sk].NoOfGangsReq,'')||''||
			COALESCE(Environment.Variables.TXTResult5[sk].SupervisoryStaffRequired,'')||''||
			COALESCE(Environment.Variables.TXTResult5[sk].OvertimeStaffRequired,'')||''||
			COALESCE(Environment.Variables.TXTResult5[sk].ShiftNumber,'')||''||
			COALESCE(Environment.Variables.TXTResult5[sk].PlaceOfDeployment,'')||''||
			COALESCE(Environment.Variables.TXTResult5[sk].Remark,'');
			-- COALESCE(Environment.Variables.TXTResult5[sk].RecordType,'')||''||
			-- COALESCE(Environment.Variables.TXTResult5[sk].RecordNumber,'')||''||
			-- COALESCE(Environment.Variables.TXTResult5[sk].NatureOfOperation,'')||''||
			-- COALESCE(Environment.Variables.TXTResult5[sk].CargoType,'')||''||
			-- COALESCE(Environment.Variables.TXTResult5[sk].BerthNumber,'')||''||
			-- COALESCE(Environment.Variables.TXTResult5[sk].HSCode,'')||''||
			-- COALESCE(Environment.Variables.TXTResult5[sk].CraneDeploymentType,'')||''||
			-- COALESCE(Environment.Variables.TXTResult5[sk].PurposeOfGang,'')||''||
			-- COALESCE(Environment.Variables.TXTResult5[sk].HookType,'')||''||
			-- COALESCE(Environment.Variables.TXTResult5[sk].ModeOfOperation,'')||''||
			-- COALESCE(Environment.Variables.TXTResult5[sk].NoOfGangsReq,'')||''||
			-- COALESCE(Environment.Variables.TXTResult5[sk].SupervisoryStaffRequired,'')||''||
			-- COALESCE(Environment.Variables.TXTResult5[sk].OvertimeStaffRequired,'')||''||
			-- COALESCE(Environment.Variables.TXTResult5[sk].ShiftNumber,'')||''||
			-- COALESCE(Environment.Variables.TXTResult5[sk].PlaceOfDeployment,'')||''||
			-- COALESCE(Environment.Variables.TXTResult5[sk].Remark,'');
		END WHILE;
		SET sk = sk + 1;
		--EDT
		WHILE (ad <= countRecord3) DO
			SET OutputRoot.DFDL.RESOURCE_REQUISITION.EDT.EDTValues = COALESCE(Environment.Variables.TXTResult6[ad].RecordType,'')||''||
			COALESCE(Environment.Variables.TXTResult6[ad].RecordNumber,'')||''||
			COALESCE(Environment.Variables.TXTResult6[ad].EquipmentNo,'')||''||
			COALESCE(Environment.Variables.TXTResult6[ad].UOMofequipment,'')||''||
			COALESCE(Environment.Variables.TXTResult6[ad].Size,'')||''||
			COALESCE(Environment.Variables.TXTResult6[ad].TypeofEquipment,'')||''||
			COALESCE(Environment.Variables.TXTResult6[ad].NoofEquipmentrequested,'');
			SET ad = ad +1;
			-- END WHILE;
			-- SET sk = sk + 1;
			SET ad = sk;
		END WHILE;
		--UNT
		SET OutputRoot.DFDL.RESOURCE_REQUISITION.UNT.DocumentCreatedDateandTime = Environment.Variables.TXTResult7[1].IssuedDateTime;

	END;
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;

	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;

END MODULE;


CREATE COMPUTE MODULE VESSEL_Get_RESREQ_Data_xmlCreation_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN

		CALL EDI_XGetRESREQ(Environment.variables.txnID,Environment.Variables.XMLResultHD[],Environment.Variables.XMLResultREC[],Environment.Variables.XMLResultFID[],Environment.Variables.XMLResult4[],Environment.Variables.XMLResult5[],Environment.Variables.XMLResultISD[]);
		SET Environment.variables.dbEndTime = PASSTHRU('SELECT CURRENT_TIMESTAMP AS DBENDTIME;');
		DECLARE i INTEGER 1;
		SET OutputRoot.XMLNSC.ResourceRequisition.DocumentHeader.DocumentReference.DocumentType = Environment.Variables.XMLResultHD[1].DocumentType;
		DECLARE headerRef REFERENCE TO OutputRoot.XMLNSC.ResourceRequisition.DocumentHeader.DocumentReference;
		SET headerRef.DocumentName = Environment.Variables.XMLResultHD[1].DocumentName;
		SET headerRef.DocumentNumber = Environment.Variables.XMLResultHD[1].DocumentNumber;
		SET headerRef.CommonRefNumber = Environment.Variables.XMLResultHD[1].CommonRefNumber;
		SET headerRef.MessageType = Environment.Variables.XMLResultHD[1].MessageType;
		SET headerRef.SenderID = Environment.Variables.XMLResultHD[1].SenderID;

		DECLARE recPartyCardinality INTEGER CARDINALITY (Environment.Variables.XMLResult4[]);
		DECLARE notPartyCardinality INTEGER CARDINALITY (Environment.Variables.XMLResult5[]);
		WHILE (i <= recPartyCardinality) DO
			SET OutputRoot.XMLNSC.ResourceRequisition.DocumentHeader.DocumentExchangeDetails.ReceivingPartyDetails.ReceivingParty[i] = Environment.Variables.XMLResult4[i].ReceivingParty;
			SET i = i + 1;
		END WHILE;
		SET i = 1;
		WHILE (i <= notPartyCardinality) DO
			SET OutputRoot.XMLNSC.ResourceRequisition.DocumentHeader.DocumentExchangeDetails.NotifyPartyDetails.NotifyParty[i] = Environment.Variables.XMLResult5[i].NotifyParty;
			SET i = i + 1;
		END WHILE;

		SET OutputRoot.XMLNSC.ResourceRequisition.DocumentDetails.RessourceRequestHeader.RecordType = Environment.Variables.XMLResultHD[1].RecordType;
		DECLARE resourceReqHeader REFERENCE TO OutputRoot.XMLNSC.ResourceRequisition.DocumentDetails.RessourceRequestHeader;
		SET resourceReqHeader.VCN = Environment.Variables.XMLResultHD[1].VCN;
		SET resourceReqHeader.CallSign = Environment.Variables.XMLResultHD[1].CallSign;
		SET resourceReqHeader.IMONumber = Environment.Variables.XMLResultHD[1].IMONumber;
		SET resourceReqHeader.VoyageNumber = Environment.Variables.XMLResultHD[1].VoyageNumber;
		SET resourceReqHeader.TOOrDOckCode = Environment.Variables.XMLResultHD[1].TOOrDOckCode;
		SET resourceReqHeader.ResReqFrom = Environment.Variables.XMLResultHD[1].ResReqFrom;
		SET resourceReqHeader.ResReqDate = Environment.Variables.XMLResultHD[1].ResReqDate;


		DECLARE j INTEGER 1;
		DECLARE k INTEGER 1;
		DECLARE reqResCard INTEGER CARDINALITY (Environment.Variables.XMLResultREC[]);
		DECLARE resReqEquipCard INTEGER CARDINALITY (Environment.Variables.XMLResultFID[]);
		WHILE (j <= reqResCard) DO
			SET OutputRoot.XMLNSC.ResourceRequisition.DocumentDetails.RessourceRequestDetails.ResourceRequest[j].RecordType = Environment.Variables.XMLResultREC[j].RecordType;
			SET OutputRoot.XMLNSC.ResourceRequisition.DocumentDetails.RessourceRequestDetails.ResourceRequest[j].RecordNumber = Environment.Variables.XMLResultREC[j].RecordNumber;
			SET OutputRoot.XMLNSC.ResourceRequisition.DocumentDetails.RessourceRequestDetails.ResourceRequest[j].NatureOfOperation = Environment.Variables.XMLResultREC[j].NatureOfOperation;
			SET OutputRoot.XMLNSC.ResourceRequisition.DocumentDetails.RessourceRequestDetails.ResourceRequest[j].CargoType = Environment.Variables.XMLResultREC[j].CargoType;
			SET OutputRoot.XMLNSC.ResourceRequisition.DocumentDetails.RessourceRequestDetails.ResourceRequest[j].BerthNumber = Environment.Variables.XMLResultREC[j].BerthNumber;
			SET OutputRoot.XMLNSC.ResourceRequisition.DocumentDetails.RessourceRequestDetails.ResourceRequest[j].HSCode = Environment.Variables.XMLResultREC[j].HSCode;
			SET OutputRoot.XMLNSC.ResourceRequisition.DocumentDetails.RessourceRequestDetails.ResourceRequest[j].CraneDeploymentType = Environment.Variables.XMLResultREC[j].CraneDeploymentType;
			SET OutputRoot.XMLNSC.ResourceRequisition.DocumentDetails.RessourceRequestDetails.ResourceRequest[j].PurposeOfGang = Environment.Variables.XMLResultREC[j].PurposeOfGang;
			SET OutputRoot.XMLNSC.ResourceRequisition.DocumentDetails.RessourceRequestDetails.ResourceRequest[j].HookType = Environment.Variables.XMLResultREC[j].HookType;
			SET OutputRoot.XMLNSC.ResourceRequisition.DocumentDetails.RessourceRequestDetails.ResourceRequest[j].ModeOfOperation = Environment.Variables.XMLResultREC[j].ModeOfOperation;
			SET OutputRoot.XMLNSC.ResourceRequisition.DocumentDetails.RessourceRequestDetails.ResourceRequest[j].NoOfGangsReq = Environment.Variables.XMLResultREC[j].NoOfGangsReq;
			WHILE (k <= resReqEquipCard) DO
				SET OutputRoot.XMLNSC.ResourceRequisition.DocumentDetails.RessourceRequestDetails.ResourceRequest[j].EquipmentDetails.Equipment[k].RecordType = Environment.Variables.XMLResultFID[j].RecordType;
				SET OutputRoot.XMLNSC.ResourceRequisition.DocumentDetails.RessourceRequestDetails.ResourceRequest[j].EquipmentDetails.Equipment[k].RecordNumber = Environment.Variables.XMLResultFID[j].RecordNumber;
				SET OutputRoot.XMLNSC.ResourceRequisition.DocumentDetails.RessourceRequestDetails.ResourceRequest[j].EquipmentDetails.Equipment[k].EquipmentNo = Environment.Variables.XMLResultFID[j].EquipmentNo;
				SET OutputRoot.XMLNSC.ResourceRequisition.DocumentDetails.RessourceRequestDetails.ResourceRequest[j].EquipmentDetails.Equipment[k].UOMofequipment = Environment.Variables.XMLResultFID[j].UOMofequipment;
				SET OutputRoot.XMLNSC.ResourceRequisition.DocumentDetails.RessourceRequestDetails.ResourceRequest[j].EquipmentDetails.Equipment[k].Size = Environment.Variables.XMLResultFID[j].Size;
				SET OutputRoot.XMLNSC.ResourceRequisition.DocumentDetails.RessourceRequestDetails.ResourceRequest[j].EquipmentDetails.Equipment[k].TypeofEquipment = Environment.Variables.XMLResultFID[j].TypeofEquipment;
				SET OutputRoot.XMLNSC.ResourceRequisition.DocumentDetails.RessourceRequestDetails.ResourceRequest[j].EquipmentDetails.Equipment[k].NoofEquipmentrequested = Environment.Variables.XMLResultFID[j].NoofEquipmentrequested;
				SET k = k + 1;
			END WHILE;
			SET OutputRoot.XMLNSC.ResourceRequisition.DocumentDetails.RessourceRequestDetails.ResourceRequest[j].SupervisoryStaffRequired = Environment.Variables.XMLResultREC[j].SupervisoryStaffRequired;
			SET OutputRoot.XMLNSC.ResourceRequisition.DocumentDetails.RessourceRequestDetails.ResourceRequest[j].OvertimeStaffRequired = Environment.Variables.XMLResultREC[j].OvertimeStaffRequired;
			SET OutputRoot.XMLNSC.ResourceRequisition.DocumentDetails.RessourceRequestDetails.ResourceRequest[j].ShiftNumber = Environment.Variables.XMLResultREC[j].ShiftNumber;
			SET OutputRoot.XMLNSC.ResourceRequisition.DocumentDetails.RessourceRequestDetails.ResourceRequest[j].PlaceOfDeployment = Environment.Variables.XMLResultREC[j].PlaceOfDeployment;
			SET OutputRoot.XMLNSC.ResourceRequisition.DocumentDetails.RessourceRequestDetails.ResourceRequest[j].Remark = Environment.Variables.XMLResultREC[j].Remark;
			SET j = j + 1;

		END WHILE;
		SET OutputRoot.XMLNSC.ResourceRequisition.DocumentSummary.IssuedDateTime = Environment.Variables.XMLResultISD[1].IssuedDateTime;

	END;
END MODULE;


CREATE COMPUTE MODULE VESSEL_Get_RESREQ_Data_failureResponse_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE errorCode CHARACTER;
		DECLARE errorText CHARACTER;
		IF (EXISTS(InputExceptionList.RecoverableException.RecoverableException.RecoverableException.RecoverableException.ParserException.ParserException[])) THEN
			SET errorCode = InputExceptionList.RecoverableException.RecoverableException.RecoverableException.RecoverableException.ParserException.ParserException.Number;
			SET errorText = InputExceptionList.RecoverableException.RecoverableException.RecoverableException.RecoverableException.ParserException.ParserException.Text;
		ELSEIF (EXISTS(InputExceptionList.RecoverableException.DatabaseException.DatabaseException.DatabaseException[])) THEN
			SET errorCode = InputExceptionList.RecoverableException.DatabaseException.DatabaseException.DatabaseException.Number;
			SET errorText = InputExceptionList.RecoverableException.DatabaseException.DatabaseException.DatabaseException.Insert[3].Text;
		ELSEIF (Environment.variables.noResultbyProcedure = TRUE) THEN
			SET errorCode = 'ERR01';
			SET errorText = 'No resultset obtained from EDI_GetFormatTypeByRefAndMsg procedure';
		ELSEIF (EXISTS(InputExceptionList.RecoverableException.RecoverableException.RecoverableException[])) THEN
			SET errorCode = InputExceptionList.RecoverableException.RecoverableException.RecoverableException.Number;
			SET errorText = InputExceptionList.RecoverableException.RecoverableException.RecoverableException.Text;
		ELSE
			SET errorCode = 'ERR01';
			SET errorText = 'ESB exception occurred';
		END IF;

		DECLARE currTime CHARACTER CURRENT_TIMESTAMP;
		SET currTime = REPLACE(currTime,'TIMESTAMP ','');
		SET currTime = SUBSTRING(currTime BEFORE '.');
		SET currTime = SUBSTRING(currTime FROM 2);
		SET OutputRoot.XMLNSC.MQI_ERRORS.UserExceptionTree.Executiongroup = ExecutionGroupLabel;
		DECLARE userExcepRef REFERENCE TO OutputRoot.XMLNSC.MQI_ERRORS.UserExceptionTree;
		SET userExcepRef.Brokername = BrokerName;
		SET userExcepRef.FlowName = MessageFlowLabel;
		SET userExcepRef.ErrorCode = errorCode;
		SET userExcepRef.ErrorText = errorText;


		SET OutputRoot.XMLNSC.MQI_ERRORS.TIMESTAMP = currTime;

		SET OutputRoot.XMLNSC.MQI_ERRORS.MsgBody = Environment.variables.request;

		SET OutputRoot.XMLNSC.MQI_ERRORS.ExceptionList = InputExceptionList;

		DECLARE outputBlob BLOB ASBITSTREAM(OutputRoot.XMLNSC, 549,1208);
		DECLARE outputChar CHARACTER CAST(outputBlob AS CHARACTER CCSID 1208);
		CALL EDI_InsIIBError(outputChar);
		-- CALL zzz_EDI_InsIIBError_20190118(outputChar);
		COMMIT;
		RETURN TRUE;
	END;
	CREATE PROCEDURE EDI_InsIIBError( IN errorXML CHARACTER)
	LANGUAGE DATABASE
	DYNAMIC RESULT SETS 0
	EXTERNAL NAME "dbo.EDI_InsIIBError";
END MODULE;

CREATE PROCEDURE EDI_TGetRESREQ( IN TransactionID CHARACTER)
LANGUAGE DATABASE
DYNAMIC RESULT SETS 7
EXTERNAL NAME "dbo.EDI_TGetRESREQ";

CREATE PROCEDURE EDI_XGetRESREQ( IN TransactionID CHARACTER)
LANGUAGE DATABASE
DYNAMIC RESULT SETS 6
EXTERNAL NAME "dbo.EDI_XGetRESREQ";

CREATE PROCEDURE EDI_GetFormatTypeByRefAndMsg( IN TransactionID CHARACTER,IN MessageName CHARACTER)
LANGUAGE DATABASE
DYNAMIC RESULT SETS 2
EXTERNAL NAME "dbo.EDI_GetFormatTypeByRefAndMsg";




CREATE COMPUTE MODULE VESSEL_Get_RESREQ_Data_fileCreation_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		IF (EXISTS(InputRoot.XMLNSC[])) THEN
			DECLARE outputBlob BLOB ASBITSTREAM(InputRoot.XMLNSC, 549,1208);
			DECLARE ReplaceCarriageReturn BLOB X'0d0a';

			SET outputBlob = REPLACE(outputBlob, ReplaceCarriageReturn);
			SET Environment.Variables.charData = CAST(outputBlob AS CHARACTER CCSID 1208);
			SET OutputRoot.XMLNSC = xmlBeautify(Environment.Variables.charData);
			SET OutputRoot.XMLNSC.root = SUBSTRING(OutputRoot.XMLNSC AFTER '?>');
			DECLARE stringOut BLOB;
			SET stringOut = CAST(OutputRoot.XMLNSC.root as BLOB CCSID 1208);

			SET OutputRoot.BLOB.BLOB = stringOut;

			SET OutputLocalEnvironment.Destination.File.Name = 'RESREQ' || Environment.variables.txnID || '.xml';
			SET OutputLocalEnvironment.Destination.File.Remote.ServerDirectory = Environment.Variables.XMLResult4[1].SFTP_PATH;
		ELSEIF (EXISTS(InputRoot.DFDL[])) THEN
			SET OutputRoot.Properties.MessageType ='{}:RESOURCE_REQUISITION';
			SET OutputRoot.Properties.MessageSet ='{JMB_DFDL}';
			SET OutputRoot.DFDL.RESOURCE_REQUISITION = InputRoot.DFDL.RESOURCE_REQUISITION;
			SET OutputLocalEnvironment.Destination.File.Name = 'RESREQ' || Environment.variables.txnID || '.txt';
			SET OutputLocalEnvironment.Destination.File.Remote.ServerDirectory = Environment.Variables.TXTResult2[1].SFTP_PATH;
		END IF;
		SET Environment.variables.fileName = OutputLocalEnvironment.Destination.File.Name;
		SET Environment.variables.fileDirectory = OutputLocalEnvironment.Destination.File.Remote.ServerDirectory;
	END;

	CREATE PROCEDURE xmlBeautify( IN unformattedXML CHARACTER)
	RETURNS CHARACTER
	LANGUAGE JAVA
	EXTERNAL NAME "com.portall.xmlBeautify.XmlBeautifier.prettyFormat";
END MODULE;


CREATE COMPUTE MODULE VESSEL_Get_RESREQ_Data_mailSMSCall_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET Environment.variables.mailStartTime = PASSTHRU('SELECT CURRENT_TIMESTAMP AS MAILSTARTTIME;');
		SET Environment.variables.mailEndTime = PASSTHRU('SELECT CURRENT_TIMESTAMP AS MAILENDTIME;');
		SET Environment.variables.SMSStartTime = PASSTHRU('SELECT CURRENT_TIMESTAMP AS SMSSTARTTIME;');
	END;
END MODULE;


CREATE COMPUTE MODULE VESSEL_Get_RESREQ_Data_auditDetails_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET Environment.variables.ediEndTime = PASSTHRU('SELECT CURRENT_TIMESTAMP AS EDIENDTIME;');
		DECLARE ediEndTime CHARACTER CAST(Environment.variables.ediEndTime[1].EDIENDTIME AS CHARACTER);
		SET ediEndTime = REPLACE(ediEndTime,'TIMESTAMP ','');
		-- SET ediEndTime = SUBSTRING(mailStartTime BEFORE '.');
		SET ediEndTime = SUBSTRING(ediEndTime FROM 2 FOR 23);

		DECLARE ediStartTime CHARACTER CAST(Environment.variables.ediStartTime[1].EDISTARTTIME AS CHARACTER);
		DECLARE mailStartTime CHARACTER CAST(Environment.variables.mailStartTime[1].MAILSTARTTIME AS CHARACTER);
		DECLARE mailEndTime CHARACTER CAST(Environment.variables.mailEndTime[1].MAILENDTIME AS CHARACTER);
		DECLARE dbStartTime CHARACTER CAST(Environment.variables.dbStartTime[1].DBSTARTTIME AS CHARACTER);
		DECLARE dbEndTime CHARACTER CAST(Environment.variables.dbEndTime[1].DBENDTIME AS CHARACTER);
		DECLARE SMSStartTime CHARACTER CAST(Environment.variables.SMSStartTime[1].SMSSTARTTIME AS CHARACTER);

		SET ediStartTime = REPLACE(ediStartTime,'TIMESTAMP ','');
		SET ediStartTime = SUBSTRING(ediStartTime FROM 2 FOR 23);

		SET mailStartTime = REPLACE(mailStartTime,'TIMESTAMP ','');
		SET mailStartTime = SUBSTRING(mailStartTime FROM 2 FOR 23);

		SET mailEndTime = REPLACE(mailEndTime,'TIMESTAMP ','');
		SET mailEndTime = SUBSTRING(mailEndTime FROM 2 FOR 23);

		SET SMSStartTime = REPLACE(SMSStartTime,'TIMESTAMP ','');
		SET SMSStartTime = SUBSTRING(SMSStartTime FROM 2 FOR 23);

		SET dbStartTime = REPLACE(dbStartTime,'TIMESTAMP ','');
		SET dbStartTime = SUBSTRING(dbStartTime FROM 2 FOR 23);

		SET dbEndTime = REPLACE(dbEndTime,'TIMESTAMP ','');
		SET dbEndTime = SUBSTRING(dbEndTime FROM 2 FOR 23);

		DECLARE messageSender CHARACTER;
		DECLARE emailId CHARACTER;
		DECLARE mobileNumber CHARACTER;
		IF (Environment.Variables.Result[1].FileFormat = 'XML' OR Environment.Variables.Result56[1].FileFormat = 'XML') THEN
			SET messageSender = Environment.Variables.XMLResult1[1].SenderID;
			SET emailId = Environment.Variables.XMLResult4[1].Email_id;
			SET mobileNumber = Environment.Variables.XMLResult4[1].Mobile;
		ELSE
			SET messageSender = Environment.Variables.TXTResult1[1].SenderID;
			SET emailId = Environment.Variables.TXTResult2[1].Email_id;
			SET mobileNumber = Environment.Variables.TXTResult2[1].Mobile;
		END IF;

		SET OutputRoot.XMLNSC.PCS_Audit.Header.MS_REF_NO = Environment.variables.txnID;
		DECLARE headerRef REFERENCE TO OutputRoot.XMLNSC.PCS_Audit.Header;
		SET headerRef.MSG_UID = UUIDASCHAR;
		IF (Environment.Variables.Result[1].FileFormat = 'XML' OR Environment.Variables.Result56[1].FileFormat = 'XML') THEN
			SET headerRef.MSG_TYPE = 'RESREQ_XML_OUT';
		ELSE
			SET headerRef.MSG_TYPE = 'RESREQ_TXT_OUT';
		END IF;
		SET headerRef.MSG_TIME = ediStartTime;
		SET headerRef.MSG_SNDR = messageSender;
		SET headerRef.PORT_CODE = SUBSTRING( Environment.variables.fileDirectory AFTER 'PORTS/');
		SET headerRef.PORT_CODE = SUBSTRING(headerRef.PORT_CODE BEFORE '/');
		SET OutputRoot.XMLNSC.PCS_Audit.Details.Message.EDI_START_TS = ediStartTime;
		DECLARE messageRef REFERENCE TO OutputRoot.XMLNSC.PCS_Audit.Details.Message;
		SET messageRef.EDI_END_TS = ediEndTime;
		SET messageRef.FILE_NAME = Environment.variables.fileName;
		SET messageRef.EDI_DIRECTORY_INFO = Environment.variables.fileDirectory;

		SET OutputRoot.XMLNSC.PCS_Audit.Details.Email.MAIL_START_TS = mailStartTime;
		DECLARE emailRef REFERENCE TO OutputRoot.XMLNSC.PCS_Audit.Details.Email;
		SET emailRef.MAILING_ID = emailId;
		SET emailRef.MAIL_NOTIFICATION_STATUS = 'Not Sent';
		SET emailRef.MAIL_END_TS = mailEndTime;

		SET OutputRoot.XMLNSC.PCS_Audit.Details.SMS.SMS_START_TS = SMSStartTime;
		DECLARE smsRef REFERENCE TO OutputRoot.XMLNSC.PCS_Audit.Details.SMS;
		SET smsRef.SMS_NOTIFICATION_NO = mobileNumber;
		SET smsRef.SMS_NOTIFICATION_STATUS = 'Not Sent';

		SET OutputRoot.XMLNSC.PCS_Audit.Details.Database.DB_SP_START_TS = dbStartTime;
		DECLARE databaseRef REFERENCE TO OutputRoot.XMLNSC.PCS_Audit.Details.Database;
		SET databaseRef.DB_SP_END_TS = dbEndTime;
		SET databaseRef.DB_SP_STATUS = 'S';
		SET databaseRef.DB_SP_REMARK = 'Executed successfully';

		DECLARE outputBlob BLOB ASBITSTREAM(OutputRoot.XMLNSC, 549,1208);
		DECLARE outputChar CHARACTER CAST(outputBlob AS CHARACTER CCSID 1208);
		CALL EDI_InsIIBAudit(outputChar);
		COMMIT;
	END;

	CREATE PROCEDURE EDI_InsIIBAudit( IN auditXML CHARACTER)
	LANGUAGE DATABASE
	DYNAMIC RESULT SETS 0
	EXTERNAL NAME "dbo.EDI_InsIIBAudit";
END MODULE;